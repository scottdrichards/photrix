import { useCallback, useEffect, useMemo, useState } from "react";
import {
  Button,
  Caption1,
  Divider,
  Spinner,
  Subtitle2,
  Title2,
  Tooltip,
  makeStyles,
  tokens,
} from "@fluentui/react-components";
import { ArrowClockwise24Regular } from "@fluentui/react-icons";
import { fetchPhotos, PhotoItem } from "./api";
import { ThumbnailGrid } from "./components/ThumbnailGrid";
import { FullscreenViewer } from "./components/FullscreenViewer";

const useStyles = makeStyles({
  app: {
    maxWidth: "1200px",
    margin: "0 auto",
    padding: tokens.spacingHorizontalXL,
    display: "flex",
    flexDirection: "column",
    gap: tokens.spacingHorizontalXL,
  },
  header: {
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    flexWrap: "wrap",
    gap: tokens.spacingHorizontalM,
  },
  statusRow: {
    display: "flex",
    alignItems: "center",
    gap: tokens.spacingHorizontalS,
    color: tokens.colorNeutralForeground2,
  },
});

export default function App() {
  const styles = useStyles();
  const [photos, setPhotos] = useState<PhotoItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selected, setSelected] = useState<PhotoItem | null>(null);

  const handleLoadPhotos = useCallback(async (signal?: AbortSignal): Promise<void> => {
    try {
      setLoading(true);
      setError(null);
      const results = await fetchPhotos(signal);
      setPhotos(results);
    } catch (err) {
      if ((err as Error).name === "AbortError") {
        return;
      }
      console.error(err);
      setError((err as Error).message ?? "Failed to load photos");
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    const controller = new AbortController();
    handleLoadPhotos(controller.signal);
    return () => controller.abort();
  }, [handleLoadPhotos]);

  const statusMessage = useMemo(() => {
    if (loading) {
      return "Loading photos...";
    }
    if (error) {
      return error;
    }
    return `${photos.length} photo${photos.length === 1 ? "" : "s"}`;
  }, [loading, error, photos.length]);

  return (
    <div className={styles.app}>
      <header className={styles.header}>
        <div>
          <Title2>Photrix Library</Title2>
          <Caption1>Browse the catalog generated by the server indexer.</Caption1>
        </div>
        <Tooltip content="Refresh" relationship="description">
          <Button
            icon={<ArrowClockwise24Regular />}
            onClick={() => handleLoadPhotos()}
            appearance="secondary"
          >
            Refresh
          </Button>
        </Tooltip>
      </header>

      <Divider />

      <div className={styles.statusRow}>
        {loading ? <Spinner size="extra-tiny" /> : <Subtitle2>ðŸ“¸</Subtitle2>}
        <Subtitle2>{statusMessage}</Subtitle2>
      </div>

      <ThumbnailGrid items={photos} onSelect={setSelected} />

      <FullscreenViewer photo={selected} onDismiss={() => setSelected(null)} />
    </div>
  );
}
